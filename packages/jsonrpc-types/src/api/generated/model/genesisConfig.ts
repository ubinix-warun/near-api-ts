/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * NEAR Protocol JSON RPC API
 * OpenAPI spec version: 1.0.0
 */
import type { AccountId } from "./accountId";
import type { ShardLayout } from "./shardLayout";
import type { AccountInfo } from "./accountInfo";

export interface GenesisConfig {
  /** Expected number of hidden validators per shard. */
  avg_hidden_validator_seats_per_shard: number[];
  /**
   * Threshold for kicking out block producers, between 0 and 100.
   * @minimum 0
   */
  block_producer_kickout_threshold: number;
  /** ID of the blockchain. This must be unique for every blockchain.
 If your testnet blockchains do not have unique chain IDs, you will have a bad time. */
  chain_id: string;
  /**
   * Limits the number of shard changes in chunk producer assignments,
 if algorithm is able to choose assignment with better balance of
 number of chunk producers for shards.
   * @minimum 0
   */
  chunk_producer_assignment_changes_limit?: number;
  /**
   * Threshold for kicking out chunk producers, between 0 and 100.
   * @minimum 0
   */
  chunk_producer_kickout_threshold: number;
  /**
   * Threshold for kicking out nodes which are only chunk validators, between 0 and 100.
   * @minimum 0
   */
  chunk_validator_only_kickout_threshold?: number;
  /** Enable dynamic re-sharding. */
  dynamic_resharding: boolean;
  /**
   * Epoch length counted in block heights.
   * @minimum 0
   */
  epoch_length: number;
  /** Fishermen stake threshold. */
  fishermen_threshold: string;
  /**
   * Initial gas limit.
   * @minimum 0
   */
  gas_limit: number;
  /**
   * Gas price adjustment rate
   * @minItems 2
   * @maxItems 2
   */
  gas_price_adjustment_rate: number[];
  /**
   * Height of genesis block.
   * @minimum 0
   */
  genesis_height: number;
  /** Official time of blockchain start. */
  genesis_time: string;
  max_gas_price: string;
  /**
   * Maximum inflation on the total supply every epoch.
   * @minItems 2
   * @maxItems 2
   */
  max_inflation_rate: number[];
  /**
   * Max stake percentage of the validators we will kick out.
   * @minimum 0
   */
  max_kickout_stake_perc?: number;
  /** Minimum gas price. It is also the initial gas price. */
  min_gas_price: string;
  /**
   * The minimum stake required for staking is last seat price divided by this number.
   * @minimum 0
   */
  minimum_stake_divisor?: number;
  /**
   * The lowest ratio s/s_total any block producer can have.
 See <https://github.com/near/NEPs/pull/167> for details
   * @minItems 2
   * @maxItems 2
   */
  minimum_stake_ratio?: number[];
  /**
   * The minimum number of validators each shard must have
   * @minimum 0
   */
  minimum_validators_per_shard?: number;
  /**
   * Number of block producer seats at genesis.
   * @minimum 0
   */
  num_block_producer_seats: number;
  /** Defines number of shards and number of block producer seats per each shard at genesis.
 Note: not used with protocol_feature_chunk_only_producers -- replaced by minimum_validators_per_shard
 Note: not used before as all block producers produce chunks for all shards */
  num_block_producer_seats_per_shard: number[];
  /**
   * Expected number of blocks per year
   * @minimum 0
   */
  num_blocks_per_year: number;
  /**
   * Deprecated.
   * @minimum 0
   */
  num_chunk_only_producer_seats?: number;
  /**
   * Number of chunk producers.
 Don't mess it up with chunk-only producers feature which is deprecated.
   * @minimum 0
   */
  num_chunk_producer_seats?: number;
  /** @minimum 0 */
  num_chunk_validator_seats?: number;
  /**
   * Online maximum threshold above which validator gets full reward.
   * @minItems 2
   * @maxItems 2
   */
  online_max_threshold?: number[];
  /**
   * Online minimum threshold below which validator doesn't receive reward.
   * @minItems 2
   * @maxItems 2
   */
  online_min_threshold?: number[];
  /**
   * Protocol treasury rate
   * @minItems 2
   * @maxItems 2
   */
  protocol_reward_rate: number[];
  /** Protocol treasury account */
  protocol_treasury_account: AccountId;
  /**
   * Threshold of stake that needs to indicate that they ready for upgrade.
   * @minItems 2
   * @maxItems 2
   */
  protocol_upgrade_stake_threshold?: number[];
  /**
   * Protocol version that this genesis works with.
   * @minimum 0
   */
  protocol_version: number;
  /** Layout information regarding how to split accounts to shards */
  shard_layout?: ShardLayout;
  /** If true, shuffle the chunk producers across shards. In other words, if
 the shard assignments were `[S_0, S_1, S_2, S_3]` where `S_i` represents
 the set of chunk producers for shard `i`, if this flag were true, the
 shard assignments might become, for example, `[S_2, S_0, S_3, S_1]`. */
  shuffle_shard_assignment_for_chunk_producers?: boolean;
  /**
   * Number of target chunk validator mandates for each shard.
   * @minimum 0
   */
  target_validator_mandates_per_shard?: number;
  /** Total supply of tokens at genesis. */
  total_supply: string;
  /**
   * Number of blocks for which a given transaction is valid
   * @minimum 0
   */
  transaction_validity_period: number;
  /** This is only for test purposes. We hard code some configs for mainnet and testnet
 in AllEpochConfig, and we want to have a way to test that code path. This flag is for that.
 If set to true, the node will use the same config override path as mainnet and testnet. */
  use_production_config?: boolean;
  /** List of initial validators. */
  validators: AccountInfo[];
}
