/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * NEAR Protocol JSON RPC API
 * OpenAPI spec version: 1.0.0
 */
import type { RpcClientConfigResponseChunkDistributionNetwork } from "./rpcClientConfigResponseChunkDistributionNetwork";
import type { EpochSyncConfig } from "./epochSyncConfig";
import type { MutableConfigValue } from "./mutableConfigValue";
import type { GCConfig } from "./gCConfig";
import type { LogSummaryStyle } from "./logSummaryStyle";
import type { StateSyncConfig } from "./stateSyncConfig";
import type { TrackedShardsConfig } from "./trackedShardsConfig";
import type { Version } from "./version";

/**
 * ClientConfig where some fields can be updated at runtime.
 */
export interface RpcClientConfigResponse {
  /** Not clear old data, set `true` for archive nodes. */
  archive: boolean;
  /**
   * Horizon at which instead of fetching block, fetch full state.
   * @minimum 0
   */
  block_fetch_horizon: number;
  /**
   * Behind this horizon header fetch kicks in.
   * @minimum 0
   */
  block_header_fetch_horizon: number;
  /**
   * Duration to check for producing / skipping block.
   * @minItems 2
   * @maxItems 2
   */
  block_production_tracking_delay: number[];
  /**
   * Time between check to perform catchup.
   * @minItems 2
   * @maxItems 2
   */
  catchup_step_period: number[];
  /** Chain id for status. */
  chain_id: string;
  /**
   * Optional config for the Chunk Distribution Network feature.
 If set to `None` then this node does not participate in the Chunk Distribution Network.
 Nodes not participating will still function fine, but possibly with higher
 latency due to the need of requesting chunks over the peer-to-peer network.
   * @nullable
   */
  chunk_distribution_network?: RpcClientConfigResponseChunkDistributionNetwork;
  /**
   * Time between checking to re-request chunks.
   * @minItems 2
   * @maxItems 2
   */
  chunk_request_retry_period: number[];
  /**
   * Multiplier for the wait time for all chunks to be received.
   * @minItems 2
   * @maxItems 2
   */
  chunk_wait_mult: number[];
  /**
   * Number of threads to execute background migration work in client.
   * @minimum 0
   */
  client_background_migration_threads: number;
  /**
   * Time between running doomslug timer.
   * @minItems 2
   * @maxItems 2
   */
  doomslug_step_period: number[];
  enable_multiline_logging: boolean;
  /** Re-export storage layer statistics as prometheus metrics. */
  enable_statistics_export: boolean;
  /**
   * Epoch length.
   * @minimum 0
   */
  epoch_length: number;
  /** Options for epoch sync. */
  epoch_sync: EpochSyncConfig;
  /** Graceful shutdown at expected block height. */
  expected_shutdown: MutableConfigValue;
  /** Garbage collection configuration. */
  gc: GCConfig;
  /**
   * Expected increase of header head height per second during header sync
   * @minimum 0
   */
  header_sync_expected_height_per_second: number;
  /**
   * How much time to wait after initial header sync
   * @minItems 2
   * @maxItems 2
   */
  header_sync_initial_timeout: number[];
  /**
   * How much time to wait after some progress is made in header sync
   * @minItems 2
   * @maxItems 2
   */
  header_sync_progress_timeout: number[];
  /**
   * How much time to wait before banning a peer in header sync if sync is too slow
   * @minItems 2
   * @maxItems 2
   */
  header_sync_stall_ban_timeout: number[];
  /**
   * Period between logging summary information.
   * @minItems 2
   * @maxItems 2
   */
  log_summary_period: number[];
  /** Enable coloring of the logs */
  log_summary_style: LogSummaryStyle;
  /**
   * Maximum wait for approvals before producing block.
   * @minItems 2
   * @maxItems 2
   */
  max_block_production_delay: number[];
  /**
   * Maximum duration before skipping given height.
   * @minItems 2
   * @maxItems 2
   */
  max_block_wait_delay: number[];
  /**
   * Max burnt gas per view method.  If present, overrides value stored in
 genesis file.  The value only affects the RPCs without influencing the
 protocol thus changing it per-node doesn‚Äôt affect the blockchain.
   * @minimum 0
   * @nullable
   */
  max_gas_burnt_view?: number | null;
  /**
   * Minimum duration before producing block.
   * @minItems 2
   * @maxItems 2
   */
  min_block_production_delay: number[];
  /**
   * Minimum number of peers to start syncing.
   * @minimum 0
   */
  min_num_peers: number;
  /**
   * Number of block producer seats
   * @minimum 0
   */
  num_block_producer_seats: number;
  /**
   * Maximum size of state witnesses in the OrphanStateWitnessPool.

 We keep only orphan witnesses which are smaller than this size.
 This limits the maximum memory usage of OrphanStateWitnessPool.
   * @minimum 0
   */
  orphan_state_witness_max_size: number;
  /**
   * OrphanStateWitnessPool keeps instances of ChunkStateWitness which can't be processed
 because the previous block isn't available. The witnesses wait in the pool until the
 required block appears. This variable controls how many witnesses can be stored in the pool.
   * @minimum 0
   */
  orphan_state_witness_pool_size: number;
  /** Limit the time of adding transactions to a chunk.
 A node produces a chunk by adding transactions from the transaction pool until
 some limit is reached. This time limit ensures that adding transactions won't take
 longer than the specified duration, which helps to produce the chunk quickly. */
  produce_chunk_add_transactions_time_limit: string;
  /** Produce empty blocks, use `false` for testing. */
  produce_empty_blocks: boolean;
  resharding_config: MutableConfigValue;
  /**
   * Listening rpc port for status.
   * @nullable
   */
  rpc_addr?: string | null;
  /** Save observed instances of invalid ChunkStateWitness to the database in DBCol::InvalidChunkStateWitnesses.
 Saving invalid witnesses is useful for analysis and debugging.
 This option can cause extra load on the database and is not recommended for production use. */
  save_invalid_witnesses: boolean;
  /** Save observed instances of ChunkStateWitness to the database in DBCol::LatestChunkStateWitnesses.
 Saving the latest witnesses is useful for analysis and debugging.
 This option can cause extra load on the database and is not recommended for production use. */
  save_latest_witnesses: boolean;
  /** save_trie_changes should be set to true iff
 - archive if false - non-archival nodes need trie changes to perform garbage collection
 - archive is true, cold_store is configured and migration to split_storage is finished - node
 working in split storage mode needs trie changes in order to do garbage collection on hot. */
  save_trie_changes: boolean;
  /** Whether to persist transaction outcomes to disk or not. */
  save_tx_outcomes: boolean;
  /** Skip waiting for sync (for testing or single node testnet). */
  skip_sync_wait: boolean;
  /** Options for syncing state. */
  state_sync: StateSyncConfig;
  /** Whether to use the State Sync mechanism.
 If disabled, the node will do Block Sync instead of State Sync. */
  state_sync_enabled: boolean;
  /**
   * Additional waiting period after a failed request to external storage
   * @minItems 2
   * @maxItems 2
   */
  state_sync_external_backoff: number[];
  /**
   * How long to wait for a response from centralized state sync
   * @minItems 2
   * @maxItems 2
   */
  state_sync_external_timeout: number[];
  /**
   * How long to wait for a response from p2p state sync
   * @minItems 2
   * @maxItems 2
   */
  state_sync_p2p_timeout: number[];
  /**
   * How long to wait after a failed state sync request
   * @minItems 2
   * @maxItems 2
   */
  state_sync_retry_backoff: number[];
  /**
   * How often to check that we are not out of sync.
   * @minItems 2
   * @maxItems 2
   */
  sync_check_period: number[];
  /**
   * Sync height threshold: below this difference in height don't start syncing.
   * @minimum 0
   */
  sync_height_threshold: number;
  /**
   * Maximum number of block requests to send to peers to sync
   * @minimum 0
   */
  sync_max_block_requests: number;
  /**
   * While syncing, how long to check for each step.
   * @minItems 2
   * @maxItems 2
   */
  sync_step_period: number[];
  tracked_shards_config: TrackedShardsConfig;
  /**
   * Limit of the size of per-shard transaction pool measured in bytes. If not set, the size
 will be unbounded.
   * @minimum 0
   * @nullable
   */
  transaction_pool_size_limit?: number | null;
  /** @minimum 0 */
  transaction_request_handler_threads: number;
  /**
   * Upper bound of the byte size of contract state that is still viewable. None is no limit
   * @minimum 0
   * @nullable
   */
  trie_viewer_state_size_limit?: number | null;
  /**
   * Time to persist Accounts Id in the router without removing them.
   * @minItems 2
   * @maxItems 2
   */
  ttl_account_id_router: number[];
  /**
   * If the node is not a chunk producer within that many blocks, then route
 to upcoming chunk producers.
   * @minimum 0
   */
  tx_routing_height_horizon: number;
  /** Version of the binary. */
  version: Version;
  /**
   * Number of threads for ViewClientActor pool.
   * @minimum 0
   */
  view_client_threads: number;
  /**
   * Number of seconds between state requests for view client.
   * @minItems 2
   * @maxItems 2
   */
  view_client_throttle_period: number[];
}
