/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * NEAR Protocol JSON RPC API
 * OpenAPI spec version: 1.0.0
 */
import type { AccountIdValidityRulesVersion } from "./accountIdValidityRulesVersion";

/**
 * Describes limits for VM and Runtime.
 TODO #4139: consider switching to strongly-typed wrappers instead of raw quantities
 */
export interface LimitConfig {
  /** Whether to enforce account_id well-formed-ness where it wasn't enforced
 historically. */
  account_id_validity_rules_version?: AccountIdValidityRulesVersion;
  /**
   * The initial number of memory pages.
 NOTE: It's not a limiter itself, but it's a value we use for initial_memory_pages.
   * @minimum 0
   */
  initial_memory_pages: number;
  /**
   * Max number of actions per receipt.
   * @minimum 0
   */
  max_actions_per_receipt: number;
  /**
   * Max length of arguments in a function call action.
   * @minimum 0
   */
  max_arguments_length: number;
  /**
   * Max contract size
   * @minimum 0
   */
  max_contract_size: number;
  /**
   * If present, stores max number of functions in one contract
   * @minimum 0
   * @nullable
   */
  max_functions_number_per_contract?: number | null;
  /**
   * Max amount of gas that can be used, excluding gas attached to promises.
   * @minimum 0
   */
  max_gas_burnt: number;
  /**
   * Max length of any method name (without terminating character).
   * @minimum 0
   */
  max_length_method_name: number;
  /**
   * Max length of returned data
   * @minimum 0
   */
  max_length_returned_data: number;
  /**
   * Max storage key size
   * @minimum 0
   */
  max_length_storage_key: number;
  /**
   * Max storage value size
   * @minimum 0
   */
  max_length_storage_value: number;
  /**
   * If present, stores max number of locals declared globally in one contract
   * @minimum 0
   * @nullable
   */
  max_locals_per_contract?: number | null;
  /**
   * What is the maximal memory pages amount is allowed to have for a contract.
   * @minimum 0
   */
  max_memory_pages: number;
  /**
   * Max total length of all method names (including terminating character) for a function call
 permission access key.
   * @minimum 0
   */
  max_number_bytes_method_names: number;
  /**
   * Max number of input data dependencies
   * @minimum 0
   */
  max_number_input_data_dependencies: number;
  /**
   * Maximum number of log entries.
   * @minimum 0
   */
  max_number_logs: number;
  /**
   * Maximum number of registers that can be used simultaneously.

 Note that due to an implementation quirk [read: a bug] in VMLogic, if we
 have this number of registers, no subsequent writes to the registers
 will succeed even if they replace an existing register.
   * @minimum 0
   */
  max_number_registers: number;
  /**
   * Max number of promises that a function call can create
   * @minimum 0
   */
  max_promises_per_function_call_action: number;
  /**
   * Max receipt size
   * @minimum 0
   */
  max_receipt_size: number;
  /**
   * Maximum number of bytes that can be stored in a single register.
   * @minimum 0
   */
  max_register_size: number;
  /**
   * How tall the stack is allowed to grow?

 See <https://wiki.parity.io/WebAssembly-StackHeight> to find out how the stack frame cost
 is calculated.
   * @minimum 0
   */
  max_stack_height: number;
  /**
   * Maximum total length in bytes of all log messages.
   * @minimum 0
   */
  max_total_log_length: number;
  /**
   * Max total prepaid gas for all function call actions per receipt.
   * @minimum 0
   */
  max_total_prepaid_gas: number;
  /**
   * Max transaction size
   * @minimum 0
   */
  max_transaction_size: number;
  /**
   * Maximum number of bytes for payload passed over a yield resume.
   * @minimum 0
   */
  max_yield_payload_size: number;
  /**
   * Hard limit on the size of storage proof generated while executing a single receipt.
   * @minimum 0
   */
  per_receipt_storage_proof_size_limit: number;
  /**
   * Limit of memory used by registers.
   * @minimum 0
   */
  registers_memory_limit: number;
  /**
   * Number of blocks after which a yielded promise times out.
   * @minimum 0
   */
  yield_timeout_length_in_blocks: number;
}
